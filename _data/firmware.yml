- titulo: Preparando la instalaci&oacute;n
  foto: img/firm-010-preparando.jpg
  texto: 
                    <p>
                    Antes de instalar el firmware en el arduino, para evitar forzar alg&uacute;n servo, vamos a desconectar la cuerdecita de la gr&uacute;a y los tornillos que unen las plaquitas del servo de las pinzas a las propias pinzas. Queremos que se muevan libremente (por ahora).
                    </p>
                    <p>
                    El servo de la mu&ntilde;eca y el motor paso a paso no necesitan calibrarse as&iacute; que no tenemos que preocuparnos de estos componentes.
                    </p>

- titulo: Instalando el firmware
  foto: img/firm-020-subiendo.jpg
  texto: 
                    <ol>
                    <li>Descarga nuestro repositorio de <a href="https://github.com/RecunchoMaker/robik">github</a>. </li>
                    <li>Abre el archivo <strong>Robik-firmware.ino</strong> de la carpeta <b>firmware</b> desde el Arduino IDE.</li>
                    <li>Conecta el Arduino al ordenador por el puerto USB.</li>
                    <li>Aseg&uacute;rate de seleccionar la placa y el puerto correspondiente.</li>
                    <li>Pincha en <i>Subir</i></li>
                    </ol>

- titulo: Conect&aacute;ndose a <strong>Robik</strong>
  codigo: $ picocom /dev/ttyUSB0<br>robik$ _</br><br>robik$ h</br>pa - pinzaAbierta<br>pc - pinzaCerrada<br>pc - pinzaSemiabierta<br>...<br>robik$ _
  texto: 
                    <p>
                        Una vez instalado el firmware, es el momento de conectarse a &eacute;l a trav&eacute;s del puerto USB. Puedes utilizar cualquier programa monitor serie. En este ejemplo usamos <i>picocom</i>, ejecut&aacute;ndolo desde una ventana de terminal poniendo como par&aacute;metro el puerto serie que nos proporciona Arduino (en linux, normalmente /dev/ttyUSB0)
                        </p>
                        <p>
                        El firmware nos proporciona una serie de comandos que podemos teclear para ejecutar movimientos en el robot. El comando <strong>h</strong> (help) lista las instrucciones disponibles.
                    </p>

- titulo: Calibraci&oacute;n de la apertura de las pinzas
  foto: img/firm-030-pa-pc.jpg
  texto: 
                    <p>
                    Los comandos <code class="terminal">pa</code>, <code class="terminal">pc</code> y <code class="terminal">ps</code> dejan las pinzas en una posici&oacute;n <i>abierta</i>, <i>cerrada</i> y <i>semicerrada</i> respectivamente.
                    <ul>
                    <li><strong>Pinza abierta&#58; </strong>esta posici&oacute;n permite al cubo girar libremente sobre su base. Interesa no abrirlas al m&aacute;ximo, sino lo justo para permitir que el cubo gire, y as&iacute; minimizar el tiempo que tarden en abrirse.</li>
                        <li><strong>Pinza cerrada&#58; </strong>el cubo debe quedar lo suficientemente agarrado como para que la gr&uacute;a lo levante sin problemas.</li>
                        <li><strong>Pinza semicerrada&#58; </strong>En esta posici&oacute;n el cubo debe estar suelto (pero con las pinzas muy cerca de &eacute;l). Esta posici&oacute;n se utiliza para preparar algunos movimientos, lo comprender&aacute;s enseguida cuando lo veas moverse.</li>
                    </ul>
                    </p>
                    <p>
                    Coloca el aspa del servo de manera que en la posici&oacute;n <b>abierta</b> quede aproximadamente vertical ligeramente a la izquierda (como un reloj a las 11&#58;25), y en la posici&oacute;n <b>cerrada</b> quede horizontal un poco hacia abajo (como un reloj a las 8&#58;10).
                    </p>

- titulo: Afinando la posici&oacute;n <b>cerrada</b>
  foto: img/firm-040-pinza-cerrada.jpg
  texto: <p>Ahora, cerrando las pinzas con el comando <code>pc</code>, colocamos el cubo de Rubik en la base y atornillamos las plaquitas a los brazos de manera que el cubo quede perfectamente agarrado en esa posici&oacute;n.</p>
                    <p>
                    Una vez hecho esto, los comandos <code>pa</code>, <code>pc</code> y <code>ps</code> deber&aacute;n funcionar correctamente. Si las posiciones son <i>aproximadamente</i> correctas pero consideras que se puede afinar algo m&aacute;s, siempre puedes editar los par&aacute;metros del firmware, como se indica m&aacute;s adelante.
                    </p>

- titulo: Calibraci&oacute;n de la gr&uacute;a
  foto: img/firm-050-grua.jpg
  texto: 
                    <p>
                      La gr&uacute;a se calibra de un modo similar aunque es mucho m&aacute;s sencillo. Con los comandos <code>ga</code>, <code>gb</code> y <code>gs</code> la gr&uacute;a se sit&uacute;a en una posici&oacute;n <i>arriba</i>, <i>abajo</i> y <i>semiarriba</i> (o semiabajo) respectivamente.
                    </p>
                    <ul>
                        <li><strong>Gr&uacute;a arriba&#58; </strong>esta posici&oacute;n se usa para que, con el cubo agarrado, la mu&ntilde;eca lo gire sobre s&iacute; mismo.</li>
                        <li><strong>Gr&uacute;a abajo&#58; </strong>en esta posici&oacute;n las pinzas deben quedar perfectamente alineadas con el centro del cubo, de manera que al cerrar las pinzas &eacute;ste quede perfectamente agarrado por el centro.</li>
                        <li><strong>Gr&uacute;a semiarriba&#58; </strong>esta posici&oacute;n se usa cuando se gira la cara inferior del cubo, para que no estorben las piezas de la mu&ntilde;eca. Del mismo modo que antes, lo entender&aacute;s perfectamente cuando lo veas moverse.</li>
                    </ul>
                    <p>
                        Bajamos la gr&uacute;a con el comando <code>gb</code>. El servo debe quedar en una posici&oacute;n m&aacute;s o menos horizontal (igual que en el caso anterior, si no es as&iacute;, separa el aspa y col&oacute;cala en posici&oacute;n horizontal)
                    </p>
                    <p>
                        Ahora intenta ajustar la gr&uacute;a para que las mu&ntilde;ecas queden a la altura del centro del cubo (quiz&aacute; te sea m&aacute;s f&aacute;cil de alinear si previamente lanzas el comando <code>ps</code> para acercar el las pinzas al cubo pero sin agarrarlo. En esa posici&oacute;n termina de apretar la cuerdecita a la polea e los hombros.
                    </p>

- titulo: La <i>mu&ntilde;eca</i>
  foto: img/firm-050-grua.jpg
  texto: 
                    <p>
                    El servo que est&aacute; anclado en el brazo lo llamamos <i>mu&ntilde;</i>eca&#58; es el que gira el cubo en (el eje de las X) cuando las pinzas lo tienen agarrado y la gr&uacute;a est&aacute; subida. Como los servos s&oacute;lo giran 180ยบ, usamos s&oacute;lo tres posiciones&#58; <code>m0</code>, <code>m1</code> y <code>m2</code>. Prueba estos comandos y deber&iacute;a moverse 0, 90 y 180ยบ; respectivamente.
                    </p>

- titulo: Probando el motor
  foto: img/firm-050-grua.jpg
  texto: 
                    <p>
                    Antes de mover el motor con un comando, aseg&uacute;rate que las ruedas engranan correctamente movi&eacute;ndo la base con la mano. Si todo se mueve con suavidad puedes probar el comando <code>ba <i>numero_de_giros</i></code>.</p><p> Los giros se corresponden con un cuarto de vuelta completa. As&iacute;, por ejemplo, <code>ba 2</code> gira la base en el sentido de las agujas del reloj. Y puedes poner n&uacute;meros negativos para girar en el sentido contrario. Por ejemplo <code>ba -1</code> hace un cuarto de vuelta en el otro sentido.
                    </p>

- titulo: Ultimos ajustes del firmware
  foto: img/cons-050-empezando-atornillar.jpg
  texto: 
                    <p>
                    Si no estas conforme con los ajustes mec&aacute;anicos, siempre puedes configurar los par&aacute;metros del firmware a tu gusto. A veces puede ser complicado ajustar correctamente las piezas ya que cuando se aprientan los tornillos en el &uacute;ltimo momento se nos desplaza algo. 
                    <p>
                    Todas las posiciones predefinidas para las pinzas, la gr&uacute;a, la mu&ntilde;eca, y el n&uacute;mero de pasos del motor est&aacute;n especificados en el fichero <strong>Robot.h</strong>. Experimenta con los par&aacute;metros y busca la combinaci&oacute;n que m&aacute;s te convenza
                    </p>
                    <p>Haz un cambio, sube el firmware, prueba y vuelve a editar hasta que est&eacute;s contento con el resultado.<p>

- titulo: Primeros experimentos
  foto: img/cons-050-empezando-atornillar.jpg
  texto: 
                    <p>
                        Ya podemos empezar a experimentar moviendo el cubo con comandos, viendo c&oacute;mo se comporta y afinando los &uacute;ltimos ajustes. Los comandos son autoexplicativos, pero como gu&iacute;a, aqu&iacute; mostramos una prueba con la que empezar.
                    </p>
                    <ul>
                        <li>Pasos para girar la cara de arriba</li>
                        <ol>
                            <li><code>pa</code> abrir pinza, por si estaba cerrada</li>
                            <li><code>m0</code> para poner el servo de la mu&ntilde;eca en una posici&oacute;n que nos permita moverlo posteriormente 180ยบ</li>
                            <li><code>gb</code> para bajar la gr&uacute;a</li>
                            <li><code>pc</code> para agarrar el cubo</li>
                            <li><code>ga</code> para levantar el cubo</li>
                            <li><code>m2</code> giramos la mu&ntilde;eca 180ยบ</li>
                            <li><code>gb</code> volvemos a apoyar el cubo</li>
                            <li><code>ps</code> abrimos <i>un poquito</i> la pinza</li>
                            <li><code>gs</code> subimos <i>un poquito</i> la gr&uacute;a</li>
                            <li><code>pc</code> para agarrar el cubo (esta vez no por el centro, si no un poco m&aacute;s arriba)</li>
                            <li><code>gb 1</code> giramos la base (y como el cubo est&aacute; agarrado se mover&aacute; la cara)</li>
                        </ol>
                    </ul>
                    <p>
                    Si detectas alg&uacute;n movimiento que no es del todo exacto, repite los ajustes en <strong>Robot.h</strong>consigas que funcione perfectamente

- titulo: El comando <strong>sec</strong>
  foto: img/cons-070-servo-hombros.jpg
  texto: 
                    <p>
                    Un comando muy &uacute;til es <code>seq <i>secuencia</i></code>, que te permite ejecutar secuencias en el formato <a href="https://es.wikipedia.org/wiki/Cubo_de_Rubik#Notaci.C3.B3n">singmaster</a> (la versi&oacute;n en ingl&eacute;s). Por ejemplo, este comando hace el movimiento conocido como <i>sexy move</i>, que consiste en mover la cara de arriba (Up) la cara de la derecha (Right) y luego de nuevo la cara de arriba en sentido contrario (U') y derecha en sentido contrario (R').
                    </p>
                    <p>
                    <code>seq URU'R'</code>
                    </p>
                    <p>
                    Este comando tambi&eacute;n te permite depurar de forma m&aacute;s sencilla los movimientos del cubo para optimizar los movimientos, ya sea modificando los par&aacute;metros en <strong>Robot.h</strong>, afinando los tiempos de espera en <strong>robot.c</strong> o modificando cualquier parte del firmware que se te ocurra.
                    </p>
                    <p>
                    Por ejemplo, el comando <code>seq FUBR</code> realiza cuatro giros seguidos del cubo en el eje de las X, y as&iacute; puedes ver c&oacute;mo se comporta en movimientos complejos y seguir afinando los par&aacute;metros.
                    </p>

- titulo: Experimenta, experimenta, experimenta!
  foto: img/cons-080-atornillando-soportes.jpg
  texto: 
                    <p>
                        ...y hasta aqu&iacute; hemos llegado! No dudes en experimentar con todas las partes de tu robot y comentarnos cualquier problema o mejora que se te ocurra.
                    </p>
                    <p>
                    En la carpeta <strong>software</strong> de <a href="https&#58;//github.com/RecunchoMaker/robik">github</a> hemos puesto algunos ejemplos de programas para manejar Robik. 
                    </p>
                    <p>
                    Y recuerda&#58; esto es un proyecto de hardware/software libre que cuenta contigo para poder mejorar. Cualquier aportaci&oacute;n ser&aacute; bienvenida.
                    </p>
                    <p>
                    Que el esp&iacute;ritu maker os acompa&ntilde;e!
                    <p>
